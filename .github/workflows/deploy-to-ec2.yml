name: CI/CD Pipeline - Deploy to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  ci_build:
    name: Build and Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run tests
      working-directory: ./frontend
      run: npm run test:run
      continue-on-error: true

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 1

  infra_provision:
    name: Provision AWS Infrastructure
    runs-on: ubuntu-latest
    needs: ci_build
    outputs:
      instance_ip: ${{ steps.terraform_output.outputs.instance_ip }}
      instance_id: ${{ steps.terraform_output.outputs.instance_id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false

    - name: Generate SSH key pair
      run: |
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/deploy_key -N ""
        echo "SSH_PUBLIC_KEY=$(cat ~/.ssh/deploy_key.pub)" >> $GITHUB_ENV
        chmod 600 ~/.ssh/deploy_key

    - name: Terraform Init
      working-directory: ./terraform
      run: |
        terraform init \
          -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
          -backend-config="region=${{ secrets.AWS_REGION }}"

    - name: Terraform Plan
      working-directory: ./terraform
      env:
        TF_VAR_ssh_public_key: ${{ env.SSH_PUBLIC_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: terraform plan

    - name: Terraform Apply
      working-directory: ./terraform
      env:
        TF_VAR_ssh_public_key: ${{ env.SSH_PUBLIC_KEY }}
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: terraform apply -auto-approve

    - name: Get Terraform Outputs
      id: terraform_output
      working-directory: ./terraform
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT
        echo "instance_id=$(terraform output -raw instance_id)" >> $GITHUB_OUTPUT

    # - name: Store SSH key securely
    #   run: |
    #     # SSH Key f√ºr aktuellen Job speichern
    #     echo "$(cat ~/.ssh/deploy_key)" > ~/.ssh/deploy_key_temp
    #     mv ~/.ssh/deploy_key_temp ~/.ssh/deploy_key
    #     chmod 600 ~/.ssh/deploy_key

  app_deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [ci_build, infra_provision]
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./dist

    - name: Generate SSH key (matching infra)
      run: |
        ssh-keygen -t rsa -b 4096 -f ~/.ssh/deploy_key -N ""
        chmod 600 ~/.ssh/deploy_key

    - name: Wait for instance to be ready
      env:
        INSTANCE_IP: ${{ needs.infra_provision.outputs.instance_ip }}
      run: |
        echo "Waiting for SSH access..."
        for i in {1..20}; do
          if ssh -i ~/.ssh/deploy_key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "echo 'SSH Ready'" 2>/dev/null; then
            echo "‚úÖ SSH connection successful"
            break
          fi
          echo "‚è≥ Waiting for SSH... ($i/20)"
          sleep 30
        done

    - name: Deploy application
      env:
        INSTANCE_IP: ${{ needs.infra_provision.outputs.instance_ip }}
      run: |
        echo "üì§ Deploying application..."
        
        # Files kopieren
        scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -r ./dist/* ubuntu@$INSTANCE_IP:/tmp/
        
        # Installation
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
          sudo rm -rf /var/www/ci-pipeline-workflow/*
          sudo mv /tmp/* /var/www/ci-pipeline-workflow/ 2>/dev/null || true
          sudo chown -R www-data:www-data /var/www/ci-pipeline-workflow/
          sudo chmod -R 755 /var/www/ci-pipeline-workflow/
          sudo systemctl reload nginx
          echo '‚úÖ Deployment completed'
        "

    - name: Health Check
      env:
        INSTANCE_IP: ${{ needs.infra_provision.outputs.instance_ip }}
      run: |
        sleep 10
        for i in {1..10}; do
          if curl -f -s http://$INSTANCE_IP/ > /dev/null; then
            echo "‚úÖ Website is live: http://$INSTANCE_IP"
            break
          fi
          echo "‚è≥ Health check $i/10..."
          sleep 10
        done
        